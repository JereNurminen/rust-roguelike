
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async getGameState() : Promise<Result<ClientGameState, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_game_state") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async movePlayer(direction: Direction) : Promise<Result<ClientGameState, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("move_player", { direction }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type Ai = { memory: Memory }
export type ClientGameState = { world: World }
export type CoreAttributes = { strength: number; speed: number; durability: number; fortitude: number; magic: number }
export type Damage = { damage_type: DamageType; damage: DieRoll }
export type DamageType = "Slice" | "Pierce" | "Blunt" | "Fire"
export type Dice = "D4" | "D6" | "D8" | "D10" | "D12" | "D20" | "D100" | { Flat: number }
export type DieRoll = { count: number; dice: Dice; modifier: number }
export type Direction = "North" | "East" | "South" | "West"
export type Entity = { id: number; kind: EntityKind; pos: WorldPosition | null; stats: CoreAttributes; status: Status; visible: boolean; discovered: boolean; ai: Ai | null }
export type EntityKind = { type: "Player" } | { type: "Npc"; species: SpeciesKind } | { type: "Item"; kind: ItemKind } | { type: "Wall"; material: Material } | { type: "Floor"; material: Material }
export type Exhaustion = "WellRested" | "Rested" | "Normal" | "Tired" | "Exhausted"
export type ItemKind = { Weapon: { damage: Damage[] } } | { Armor: { defense: number } }
export type LastSeen = { entity: number; position: WorldPosition; on_turn: number }
export type Material = { kind: MaterialKind; blocks_vision: boolean; blocks_movement: boolean }
export type MaterialKind = "Stone" | "Flesh"
export type Memory = { last_seen_positions: LastSeen[] }
export type SpeciesKind = "Human" | "Goblin"
export type Status = { health: number; stamina: number; mana: number; exhaustion: Exhaustion }
export type World = { entities: Partial<{ [key in number]: Entity }>; next_entity_id: number; player_id: number }
export type WorldPosition = { x: number; y: number }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
